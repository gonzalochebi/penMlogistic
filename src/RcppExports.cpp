// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// mcp_cpp
float mcp_cpp(float t, float lambda, float gamma);
RcppExport SEXP _penMlogistic_mcp_cpp(SEXP tSEXP, SEXP lambdaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type t(tSEXP);
    Rcpp::traits::input_parameter< float >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< float >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(mcp_cpp(t, lambda, gamma));
    return rcpp_result_gen;
END_RCPP
}
// scad_cpp
float scad_cpp(float t, float lambda, float gamma);
RcppExport SEXP _penMlogistic_scad_cpp(SEXP tSEXP, SEXP lambdaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type t(tSEXP);
    Rcpp::traits::input_parameter< float >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< float >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(scad_cpp(t, lambda, gamma));
    return rcpp_result_gen;
END_RCPP
}
// norm_quotient_cpp
float norm_quotient_cpp(arma::vec beta, float lambda);
RcppExport SEXP _penMlogistic_norm_quotient_cpp(SEXP betaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< float >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(norm_quotient_cpp(beta, lambda));
    return rcpp_result_gen;
END_RCPP
}
// elastic_net_cpp
float elastic_net_cpp(float t, float lambda, float gamma);
RcppExport SEXP _penMlogistic_elastic_net_cpp(SEXP tSEXP, SEXP lambdaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type t(tSEXP);
    Rcpp::traits::input_parameter< float >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< float >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(elastic_net_cpp(t, lambda, gamma));
    return rcpp_result_gen;
END_RCPP
}
// norm_quotient_mod_cpp
float norm_quotient_mod_cpp(arma::vec beta, float lambda, float constant);
RcppExport SEXP _penMlogistic_norm_quotient_mod_cpp(SEXP betaSEXP, SEXP lambdaSEXP, SEXP constantSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< float >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< float >::type constant(constantSEXP);
    rcpp_result_gen = Rcpp::wrap(norm_quotient_mod_cpp(beta, lambda, constant));
    return rcpp_result_gen;
END_RCPP
}
// pnorm_cpp
float pnorm_cpp(float x);
RcppExport SEXP _penMlogistic_pnorm_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(pnorm_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// aux_fun_1
float aux_fun_1(float s);
RcppExport SEXP _penMlogistic_aux_fun_1(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(aux_fun_1(s));
    return rcpp_result_gen;
END_RCPP
}
// rho_ch_cpp
float rho_ch_cpp(float t, float k);
RcppExport SEXP _penMlogistic_rho_ch_cpp(SEXP tSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type t(tSEXP);
    Rcpp::traits::input_parameter< float >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(rho_ch_cpp(t, k));
    return rcpp_result_gen;
END_RCPP
}
// dev_cpp
float dev_cpp(float score, int y);
RcppExport SEXP _penMlogistic_dev_cpp(SEXP scoreSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type score(scoreSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(dev_cpp(score, y));
    return rcpp_result_gen;
END_RCPP
}
// der_rho_ch_cpp
float der_rho_ch_cpp(float t, float k);
RcppExport SEXP _penMlogistic_der_rho_ch_cpp(SEXP tSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type t(tSEXP);
    Rcpp::traits::input_parameter< float >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(der_rho_ch_cpp(t, k));
    return rcpp_result_gen;
END_RCPP
}
// G_ch_cpp
float G_ch_cpp(float t, float k);
RcppExport SEXP _penMlogistic_G_ch_cpp(SEXP tSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type t(tSEXP);
    Rcpp::traits::input_parameter< float >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(G_ch_cpp(t, k));
    return rcpp_result_gen;
END_RCPP
}
// inv_logit_cpp
float inv_logit_cpp(float u);
RcppExport SEXP _penMlogistic_inv_logit_cpp(SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_logit_cpp(u));
    return rcpp_result_gen;
END_RCPP
}
// phi_ch_cpp
float phi_ch_cpp(float score, int y);
RcppExport SEXP _penMlogistic_phi_ch_cpp(SEXP scoreSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type score(scoreSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(phi_ch_cpp(score, y));
    return rcpp_result_gen;
END_RCPP
}
// der_phi_0_ch_cpp
float der_phi_0_ch_cpp(float score);
RcppExport SEXP _penMlogistic_der_phi_0_ch_cpp(SEXP scoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type score(scoreSEXP);
    rcpp_result_gen = Rcpp::wrap(der_phi_0_ch_cpp(score));
    return rcpp_result_gen;
END_RCPP
}
// der_phi_ch_cpp
float der_phi_ch_cpp(float score, int y);
RcppExport SEXP _penMlogistic_der_phi_ch_cpp(SEXP scoreSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type score(scoreSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(der_phi_ch_cpp(score, y));
    return rcpp_result_gen;
END_RCPP
}
// get_scores
arma::vec get_scores(arma::mat X, arma::vec beta, float beta0);
RcppExport SEXP _penMlogistic_get_scores(SEXP XSEXP, SEXP betaSEXP, SEXP beta0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< float >::type beta0(beta0SEXP);
    rcpp_result_gen = Rcpp::wrap(get_scores(X, beta, beta0));
    return rcpp_result_gen;
END_RCPP
}
// eval_loss_function_ch_cpp
float eval_loss_function_ch_cpp(arma::mat X, arma::vec Y, arma::vec beta, float beta0, arma::vec weights);
RcppExport SEXP _penMlogistic_eval_loss_function_ch_cpp(SEXP XSEXP, SEXP YSEXP, SEXP betaSEXP, SEXP beta0SEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< float >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(eval_loss_function_ch_cpp(X, Y, beta, beta0, weights));
    return rcpp_result_gen;
END_RCPP
}
// eval_der_loss_function_ch_cpp
arma::vec eval_der_loss_function_ch_cpp(arma::mat X, arma::vec Y, arma::vec beta, float beta0, arma::vec weights);
RcppExport SEXP _penMlogistic_eval_der_loss_function_ch_cpp(SEXP XSEXP, SEXP YSEXP, SEXP betaSEXP, SEXP beta0SEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< float >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(eval_der_loss_function_ch_cpp(X, Y, beta, beta0, weights));
    return rcpp_result_gen;
END_RCPP
}
// der_dev_cpp
float der_dev_cpp(float score, int y);
RcppExport SEXP _penMlogistic_der_dev_cpp(SEXP scoreSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type score(scoreSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(der_dev_cpp(score, y));
    return rcpp_result_gen;
END_RCPP
}
// eval_loss_function_dev_cpp
float eval_loss_function_dev_cpp(arma::mat X, arma::vec Y, arma::vec beta, float beta0, arma::vec weights);
RcppExport SEXP _penMlogistic_eval_loss_function_dev_cpp(SEXP XSEXP, SEXP YSEXP, SEXP betaSEXP, SEXP beta0SEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< float >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(eval_loss_function_dev_cpp(X, Y, beta, beta0, weights));
    return rcpp_result_gen;
END_RCPP
}
// eval_der_loss_function_dev_cpp
arma::vec eval_der_loss_function_dev_cpp(arma::mat X, arma::vec Y, arma::vec beta, float beta0, arma::vec weights);
RcppExport SEXP _penMlogistic_eval_der_loss_function_dev_cpp(SEXP XSEXP, SEXP YSEXP, SEXP betaSEXP, SEXP beta0SEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< float >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(eval_der_loss_function_dev_cpp(X, Y, beta, beta0, weights));
    return rcpp_result_gen;
END_RCPP
}
// der_rho_div_cpp
float der_rho_div_cpp(float t, float c);
RcppExport SEXP _penMlogistic_der_rho_div_cpp(SEXP tSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type t(tSEXP);
    Rcpp::traits::input_parameter< float >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(der_rho_div_cpp(t, c));
    return rcpp_result_gen;
END_RCPP
}
// G_div_cpp
float G_div_cpp(float t, float c);
RcppExport SEXP _penMlogistic_G_div_cpp(SEXP tSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type t(tSEXP);
    Rcpp::traits::input_parameter< float >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(G_div_cpp(t, c));
    return rcpp_result_gen;
END_RCPP
}
// rho_div_cpp
float rho_div_cpp(float t, float c);
RcppExport SEXP _penMlogistic_rho_div_cpp(SEXP tSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type t(tSEXP);
    Rcpp::traits::input_parameter< float >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(rho_div_cpp(t, c));
    return rcpp_result_gen;
END_RCPP
}
// phi_div_cpp
float phi_div_cpp(float score, int y);
RcppExport SEXP _penMlogistic_phi_div_cpp(SEXP scoreSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type score(scoreSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(phi_div_cpp(score, y));
    return rcpp_result_gen;
END_RCPP
}
// der_phi_0_div_cpp
float der_phi_0_div_cpp(float score, float c);
RcppExport SEXP _penMlogistic_der_phi_0_div_cpp(SEXP scoreSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type score(scoreSEXP);
    Rcpp::traits::input_parameter< float >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(der_phi_0_div_cpp(score, c));
    return rcpp_result_gen;
END_RCPP
}
// der_phi_div_cpp
float der_phi_div_cpp(float score, int y);
RcppExport SEXP _penMlogistic_der_phi_div_cpp(SEXP scoreSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type score(scoreSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(der_phi_div_cpp(score, y));
    return rcpp_result_gen;
END_RCPP
}
// eval_loss_function_div_cpp
float eval_loss_function_div_cpp(arma::mat X, arma::vec Y, arma::vec beta, float beta0, arma::vec weights);
RcppExport SEXP _penMlogistic_eval_loss_function_div_cpp(SEXP XSEXP, SEXP YSEXP, SEXP betaSEXP, SEXP beta0SEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< float >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(eval_loss_function_div_cpp(X, Y, beta, beta0, weights));
    return rcpp_result_gen;
END_RCPP
}
// eval_der_loss_function_div_cpp
arma::vec eval_der_loss_function_div_cpp(arma::mat X, arma::vec Y, arma::vec beta, float beta0, arma::vec weights);
RcppExport SEXP _penMlogistic_eval_der_loss_function_div_cpp(SEXP XSEXP, SEXP YSEXP, SEXP betaSEXP, SEXP beta0SEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< float >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(eval_der_loss_function_div_cpp(X, Y, beta, beta0, weights));
    return rcpp_result_gen;
END_RCPP
}
// phi_lse_cpp
float phi_lse_cpp(float score, int y);
RcppExport SEXP _penMlogistic_phi_lse_cpp(SEXP scoreSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type score(scoreSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(phi_lse_cpp(score, y));
    return rcpp_result_gen;
END_RCPP
}
// der_phi_lse_cpp
float der_phi_lse_cpp(float score, int y);
RcppExport SEXP _penMlogistic_der_phi_lse_cpp(SEXP scoreSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type score(scoreSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(der_phi_lse_cpp(score, y));
    return rcpp_result_gen;
END_RCPP
}
// eval_loss_function_lse_cpp
float eval_loss_function_lse_cpp(arma::mat X, arma::vec Y, arma::vec beta, float beta0, arma::vec weights);
RcppExport SEXP _penMlogistic_eval_loss_function_lse_cpp(SEXP XSEXP, SEXP YSEXP, SEXP betaSEXP, SEXP beta0SEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< float >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(eval_loss_function_lse_cpp(X, Y, beta, beta0, weights));
    return rcpp_result_gen;
END_RCPP
}
// eval_der_loss_function_lse_cpp
arma::vec eval_der_loss_function_lse_cpp(arma::mat X, arma::vec Y, arma::vec beta, float beta0, arma::vec weights);
RcppExport SEXP _penMlogistic_eval_der_loss_function_lse_cpp(SEXP XSEXP, SEXP YSEXP, SEXP betaSEXP, SEXP beta0SEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< float >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(eval_der_loss_function_lse_cpp(X, Y, beta, beta0, weights));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_penMlogistic_mcp_cpp", (DL_FUNC) &_penMlogistic_mcp_cpp, 3},
    {"_penMlogistic_scad_cpp", (DL_FUNC) &_penMlogistic_scad_cpp, 3},
    {"_penMlogistic_norm_quotient_cpp", (DL_FUNC) &_penMlogistic_norm_quotient_cpp, 2},
    {"_penMlogistic_elastic_net_cpp", (DL_FUNC) &_penMlogistic_elastic_net_cpp, 3},
    {"_penMlogistic_norm_quotient_mod_cpp", (DL_FUNC) &_penMlogistic_norm_quotient_mod_cpp, 3},
    {"_penMlogistic_pnorm_cpp", (DL_FUNC) &_penMlogistic_pnorm_cpp, 1},
    {"_penMlogistic_aux_fun_1", (DL_FUNC) &_penMlogistic_aux_fun_1, 1},
    {"_penMlogistic_rho_ch_cpp", (DL_FUNC) &_penMlogistic_rho_ch_cpp, 2},
    {"_penMlogistic_dev_cpp", (DL_FUNC) &_penMlogistic_dev_cpp, 2},
    {"_penMlogistic_der_rho_ch_cpp", (DL_FUNC) &_penMlogistic_der_rho_ch_cpp, 2},
    {"_penMlogistic_G_ch_cpp", (DL_FUNC) &_penMlogistic_G_ch_cpp, 2},
    {"_penMlogistic_inv_logit_cpp", (DL_FUNC) &_penMlogistic_inv_logit_cpp, 1},
    {"_penMlogistic_phi_ch_cpp", (DL_FUNC) &_penMlogistic_phi_ch_cpp, 2},
    {"_penMlogistic_der_phi_0_ch_cpp", (DL_FUNC) &_penMlogistic_der_phi_0_ch_cpp, 1},
    {"_penMlogistic_der_phi_ch_cpp", (DL_FUNC) &_penMlogistic_der_phi_ch_cpp, 2},
    {"_penMlogistic_get_scores", (DL_FUNC) &_penMlogistic_get_scores, 3},
    {"_penMlogistic_eval_loss_function_ch_cpp", (DL_FUNC) &_penMlogistic_eval_loss_function_ch_cpp, 5},
    {"_penMlogistic_eval_der_loss_function_ch_cpp", (DL_FUNC) &_penMlogistic_eval_der_loss_function_ch_cpp, 5},
    {"_penMlogistic_der_dev_cpp", (DL_FUNC) &_penMlogistic_der_dev_cpp, 2},
    {"_penMlogistic_eval_loss_function_dev_cpp", (DL_FUNC) &_penMlogistic_eval_loss_function_dev_cpp, 5},
    {"_penMlogistic_eval_der_loss_function_dev_cpp", (DL_FUNC) &_penMlogistic_eval_der_loss_function_dev_cpp, 5},
    {"_penMlogistic_der_rho_div_cpp", (DL_FUNC) &_penMlogistic_der_rho_div_cpp, 2},
    {"_penMlogistic_G_div_cpp", (DL_FUNC) &_penMlogistic_G_div_cpp, 2},
    {"_penMlogistic_rho_div_cpp", (DL_FUNC) &_penMlogistic_rho_div_cpp, 2},
    {"_penMlogistic_phi_div_cpp", (DL_FUNC) &_penMlogistic_phi_div_cpp, 2},
    {"_penMlogistic_der_phi_0_div_cpp", (DL_FUNC) &_penMlogistic_der_phi_0_div_cpp, 2},
    {"_penMlogistic_der_phi_div_cpp", (DL_FUNC) &_penMlogistic_der_phi_div_cpp, 2},
    {"_penMlogistic_eval_loss_function_div_cpp", (DL_FUNC) &_penMlogistic_eval_loss_function_div_cpp, 5},
    {"_penMlogistic_eval_der_loss_function_div_cpp", (DL_FUNC) &_penMlogistic_eval_der_loss_function_div_cpp, 5},
    {"_penMlogistic_phi_lse_cpp", (DL_FUNC) &_penMlogistic_phi_lse_cpp, 2},
    {"_penMlogistic_der_phi_lse_cpp", (DL_FUNC) &_penMlogistic_der_phi_lse_cpp, 2},
    {"_penMlogistic_eval_loss_function_lse_cpp", (DL_FUNC) &_penMlogistic_eval_loss_function_lse_cpp, 5},
    {"_penMlogistic_eval_der_loss_function_lse_cpp", (DL_FUNC) &_penMlogistic_eval_der_loss_function_lse_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_penMlogistic(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
